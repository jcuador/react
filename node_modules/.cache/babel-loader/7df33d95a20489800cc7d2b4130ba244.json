{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport _classCallCheck from \"D:\\\\TFG\\\\reactfront\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\TFG\\\\reactfront\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\TFG\\\\reactfront\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"D:\\\\TFG\\\\reactfront\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:\\\\TFG\\\\reactfront\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\TFG\\\\reactfront\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport AnimatedNode from './AnimatedNode';\nimport AnimatedTransform from './AnimatedTransform';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport StyleSheet from '../../../../exports/StyleSheet';\nvar flattenStyle = StyleSheet.flatten;\nfunction createAnimatedStyle(inputStyle) {\n  var style = flattenStyle(inputStyle);\n  var animatedStyles = {};\n  for (var key in style) {\n    var value = style[key];\n    if (key === 'transform') {\n      animatedStyles[key] = new AnimatedTransform(value);\n    } else if (value instanceof AnimatedNode) {\n      animatedStyles[key] = value;\n    } else if (value && !Array.isArray(value) && typeof value === 'object') {\n      animatedStyles[key] = createAnimatedStyle(value);\n    }\n  }\n  return animatedStyles;\n}\nvar AnimatedStyle = /*#__PURE__*/function (_AnimatedWithChildren) {\n  _inherits(AnimatedStyle, _AnimatedWithChildren);\n  function AnimatedStyle(style) {\n    var _this;\n    _classCallCheck(this, AnimatedStyle);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedStyle).call(this));\n    _this._inputStyle = style;\n    _this._style = createAnimatedStyle(style);\n    return _this;\n  }\n\n  // Recursively get values for nested styles (like iOS's shadowOffset)\n  _createClass(AnimatedStyle, [{\n    key: \"_walkStyleAndGetValues\",\n    value: function _walkStyleAndGetValues(style) {\n      var updatedStyle = {};\n      for (var key in style) {\n        var value = style[key];\n        if (value instanceof AnimatedNode) {\n          if (!value.__isNative) {\n            // We cannot use value of natively driven nodes this way as the value we have access from\n            // JS may not be up to date.\n            updatedStyle[key] = value.__getValue();\n          }\n        } else if (value && !Array.isArray(value) && typeof value === 'object') {\n          // Support animating nested values (for example: shadowOffset.height)\n          updatedStyle[key] = this._walkStyleAndGetValues(value);\n        } else {\n          updatedStyle[key] = value;\n        }\n      }\n      return updatedStyle;\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      return [this._inputStyle, this._walkStyleAndGetValues(this._style)];\n    } // Recursively get animated values for nested styles (like iOS's shadowOffset)\n  }, {\n    key: \"_walkStyleAndGetAnimatedValues\",\n    value: function _walkStyleAndGetAnimatedValues(style) {\n      var updatedStyle = {};\n      for (var key in style) {\n        var value = style[key];\n        if (value instanceof AnimatedNode) {\n          updatedStyle[key] = value.__getAnimatedValue();\n        } else if (value && !Array.isArray(value) && typeof value === 'object') {\n          // Support animating nested values (for example: shadowOffset.height)\n          updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n        }\n      }\n      return updatedStyle;\n    }\n  }, {\n    key: \"__getAnimatedValue\",\n    value: function __getAnimatedValue() {\n      return this._walkStyleAndGetAnimatedValues(this._style);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      for (var key in this._style) {\n        var value = this._style[key];\n        if (value instanceof AnimatedNode) {\n          value.__addChild(this);\n        }\n      }\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      for (var key in this._style) {\n        var value = this._style[key];\n        if (value instanceof AnimatedNode) {\n          value.__removeChild(this);\n        }\n      }\n      _get(_getPrototypeOf(AnimatedStyle.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__makeNative\",\n    value: function __makeNative() {\n      for (var key in this._style) {\n        var value = this._style[key];\n        if (value instanceof AnimatedNode) {\n          value.__makeNative();\n        }\n      }\n      _get(_getPrototypeOf(AnimatedStyle.prototype), \"__makeNative\", this).call(this);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      var styleConfig = {};\n      for (var styleKey in this._style) {\n        if (this._style[styleKey] instanceof AnimatedNode) {\n          var style = this._style[styleKey];\n          style.__makeNative();\n          styleConfig[styleKey] = style.__getNativeTag();\n        }\n      }\n      NativeAnimatedHelper.validateStyles(styleConfig);\n      return {\n        type: 'style',\n        style: styleConfig\n      };\n    }\n  }]);\n  return AnimatedStyle;\n}(AnimatedWithChildren);\nexport default AnimatedStyle;","map":null,"metadata":{},"sourceType":"module"}